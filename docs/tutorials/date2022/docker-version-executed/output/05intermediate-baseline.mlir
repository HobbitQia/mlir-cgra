// -----// IR Dump After SodaKernelOutlining //----- //
#map0 = affine_map<(d0, d1, d2, d3) -> (d0 * 1225 + d1 * 35 + d2 + d3 + 36)>
#map1 = affine_map<(d0, d1, d2, d3) -> (d3, d0, d1, d2)>
#map2 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>
#map3 = affine_map<(d0, d1, d2, d3) -> (d3)>
#map4 = affine_map<(d0, d1) -> (d0, d1)>
#map5 = affine_map<(d0, d1) -> (d1)>
#map6 = affine_map<(d0, d1) -> (d0)>
module attributes {soda.container_module, tf.versions = {bad_consumers = [], min_consumer = 0 : i32, producer = 561 : i32}} {
  memref.global "private" constant @__constant_2xf32 : memref<2xf32> = dense<0.000000e+00>
  memref.global "private" constant @__constant_4xf32 : memref<4xf32> = dense<0.000000e+00>
  memref.global "private" constant @__constant_8xf32 : memref<8xf32> = dense<0.000000e+00>
  memref.global "private" constant @__constant_1xf32 : memref<1xf32> = dense<0.000000e+00>
  memref.global "private" constant @__constant_1x5x5x1xf32 : memref<1x5x5x1xf32> = dense<[[[[-0.144123852], [-0.203296721], [0.0245194137], [0.0424404144], [-5.772960e-02]], [[0.213269472], [-0.00469377637], [0.345114052], [0.136302114], [-0.259548783]], [[0.145365268], [0.112524837], [0.0500608087], [-0.0937015414], [-0.0550665557]], [[0.0901061296], [0.286698043], [0.111992478], [0.231037259], [-0.28824234]], [[-0.15258716], [-0.335655361], [0.156836212], [0.183970571], [0.124615282]]]]>
  memref.global "private" constant @__constant_1x256x8xf32 : memref<1x256x8xf32> = dense<"
  memref.global "private" constant @__constant_1x8x4xf32 : memref<1x8x4xf32> = dense<[[[-0.431032777, 0.339656174, -0.0172508955, 0.530783117], [-0.131361604, -0.686532557, 0.29633683, -0.190197289], [0.114347279, 0.56687206, -0.5206815, 0.0635936856], [0.278496087, -0.701272607, -0.192214727, 0.0925094485], [-0.263988972, 0.210848868, 0.702368438, -0.632420897], [0.552770555, -0.32865116, -0.0839602351, 0.335239589], [-0.466998219, -0.367347717, 0.669422566, 0.683026611], [-0.653910696, -0.016515851, 0.00850236415, 0.640155136]]]>
  memref.global "private" constant @__constant_1x4x2xf32 : memref<1x4x2xf32> = dense<[[[-0.649729251, -0.36405158], [0.711094856, -0.165482044], [-0.528160095, -0.548771381], [0.198056698, 0.657765388]]]>
  func @main(%arg0: memref<4x32x32x1xf32>, %arg1: memref<4x2xf32>) attributes {tf.entry_function = {control_outputs = "", inputs = "x1", outputs = "Identity"}} {
    %cst = arith.constant 0.000000e+00 : f32
    %cst_0 = arith.constant 3.40282347E+38 : f32
    %cst_1 = arith.constant 1.000000e+00 : f32
    %0 = memref.alloc() {alignment = 128 : i64} : memref<4x35x35x1xf32>
    %1 = memref.get_global @__constant_2xf32 : memref<2xf32>
    %2 = memref.get_global @__constant_4xf32 : memref<4xf32>
    %3 = memref.get_global @__constant_8xf32 : memref<8xf32>
    %4 = memref.get_global @__constant_1xf32 : memref<1xf32>
    %5 = memref.get_global @__constant_1x5x5x1xf32 : memref<1x5x5x1xf32>
    %6 = memref.get_global @__constant_1x256x8xf32 : memref<1x256x8xf32>
    %7 = memref.get_global @__constant_1x8x4xf32 : memref<1x8x4xf32>
    %8 = memref.get_global @__constant_1x4x2xf32 : memref<1x4x2xf32>
    %9 = memref.alloc() : memref<4x35x35x1xf32>
    linalg.fill(%cst, %9) : f32, memref<4x35x35x1xf32> 
    memref.copy %9, %0 : memref<4x35x35x1xf32> to memref<4x35x35x1xf32>
    memref.dealloc %9 : memref<4x35x35x1xf32>
    %10 = memref.subview %0[0, 1, 1, 0] [4, 32, 32, 1] [1, 1, 1, 1] : memref<4x35x35x1xf32> to memref<4x32x32x1xf32, #map0>
    memref.copy %arg0, %10 : memref<4x32x32x1xf32> to memref<4x32x32x1xf32, #map0>
    %11 = memref.alloc() : memref<5x5x1x1xf32>
    linalg.generic {indexing_maps = [#map1, #map2], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%5 : memref<1x5x5x1xf32>) outs(%11 : memref<5x5x1x1xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):
      linalg.yield %arg2 : f32
    }
    %12 = memref.alloc() : memref<4x16x16x1xf32>
    linalg.fill(%cst, %12) : f32, memref<4x16x16x1xf32> 
    %13 = memref.alloc() : memref<4x16x16x1xf32>
    memref.copy %12, %13 : memref<4x16x16x1xf32> to memref<4x16x16x1xf32>
    memref.dealloc %12 : memref<4x16x16x1xf32>
    linalg.conv_2d_nhwc_hwcf {dilations = dense<1> : tensor<2xi64>, strides = dense<2> : tensor<2xi64>} ins(%0, %11 : memref<4x35x35x1xf32>, memref<5x5x1x1xf32>) outs(%13 : memref<4x16x16x1xf32>)
    memref.dealloc %11 : memref<5x5x1x1xf32>
    memref.dealloc %0 : memref<4x35x35x1xf32>
    %14 = memref.alloc() : memref<4x16x16x1xf32>
    linalg.generic {indexing_maps = [#map3, #map2, #map2], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4, %13 : memref<1xf32>, memref<4x16x16x1xf32>) outs(%14 : memref<4x16x16x1xf32>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):
      %41 = arith.addf %arg2, %arg3 : f32
      linalg.yield %41 : f32
    }
    memref.dealloc %13 : memref<4x16x16x1xf32>
    %15 = memref.alloc() : memref<4x16x16x1xf32>
    linalg.generic {indexing_maps = [#map2, #map2], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%14 : memref<4x16x16x1xf32>) outs(%15 : memref<4x16x16x1xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):
      %41 = arith.cmpf olt, %arg2, %cst : f32
      %42 = arith.select %41, %cst, %arg2 : f32
      %43 = arith.cmpf olt, %cst_0, %arg2 : f32
      %44 = arith.select %43, %cst_0, %42 : f32
      linalg.yield %44 : f32
    }
    memref.dealloc %14 : memref<4x16x16x1xf32>
    %16 = memref.collapse_shape %15 [[0], [1, 2, 3]] : memref<4x16x16x1xf32> into memref<4x256xf32>
    %17 = memref.expand_shape %16 [[0, 1], [2]] : memref<4x256xf32> into memref<1x4x256xf32>
    %18 = memref.alloc() : memref<1x4x8xf32>
    linalg.fill(%cst, %18) : f32, memref<1x4x8xf32> 
    %19 = memref.alloc() : memref<1x4x8xf32>
    memref.copy %18, %19 : memref<1x4x8xf32> to memref<1x4x8xf32>
    memref.dealloc %18 : memref<1x4x8xf32>
    linalg.batch_matmul ins(%17, %6 : memref<1x4x256xf32>, memref<1x256x8xf32>) outs(%19 : memref<1x4x8xf32>)
    memref.dealloc %15 : memref<4x16x16x1xf32>
    %20 = memref.collapse_shape %19 [[0, 1], [2]] : memref<1x4x8xf32> into memref<4x8xf32>
    %21 = memref.alloc() : memref<4x8xf32>
    linalg.generic {indexing_maps = [#map4, #map5, #map4], iterator_types = ["parallel", "parallel"]} ins(%20, %3 : memref<4x8xf32>, memref<8xf32>) outs(%21 : memref<4x8xf32>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):
      %41 = arith.addf %arg2, %arg3 : f32
      linalg.yield %41 : f32
    }
    memref.dealloc %19 : memref<1x4x8xf32>
    %22 = memref.alloc() : memref<4x8xf32>
    linalg.generic {indexing_maps = [#map4, #map4], iterator_types = ["parallel", "parallel"]} ins(%21 : memref<4x8xf32>) outs(%22 : memref<4x8xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):
      %41 = arith.cmpf olt, %arg2, %cst : f32
      %42 = arith.select %41, %cst, %arg2 : f32
      %43 = arith.cmpf olt, %cst_0, %arg2 : f32
      %44 = arith.select %43, %cst_0, %42 : f32
      linalg.yield %44 : f32
    }
    memref.dealloc %21 : memref<4x8xf32>
    %23 = memref.expand_shape %22 [[0, 1], [2]] : memref<4x8xf32> into memref<1x4x8xf32>
    %24 = memref.alloc() : memref<1x4x4xf32>
    linalg.fill(%cst, %24) : f32, memref<1x4x4xf32> 
    %25 = memref.alloc() : memref<1x4x4xf32>
    memref.copy %24, %25 : memref<1x4x4xf32> to memref<1x4x4xf32>
    memref.dealloc %24 : memref<1x4x4xf32>
    soda.launch_func  @main_kernel::@main_kernel args(%23 : memref<1x4x8xf32>, %7 : memref<1x8x4xf32>, %25 : memref<1x4x4xf32>)
    memref.dealloc %22 : memref<4x8xf32>
    %26 = memref.collapse_shape %25 [[0, 1], [2]] : memref<1x4x4xf32> into memref<4x4xf32>
    %27 = memref.alloc() : memref<4x4xf32>
    linalg.generic {indexing_maps = [#map4, #map5, #map4], iterator_types = ["parallel", "parallel"]} ins(%26, %2 : memref<4x4xf32>, memref<4xf32>) outs(%27 : memref<4x4xf32>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):
      %41 = arith.addf %arg2, %arg3 : f32
      linalg.yield %41 : f32
    }
    memref.dealloc %25 : memref<1x4x4xf32>
    %28 = memref.alloc() : memref<4x4xf32>
    linalg.generic {indexing_maps = [#map4, #map4], iterator_types = ["parallel", "parallel"]} ins(%27 : memref<4x4xf32>) outs(%28 : memref<4x4xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):
      %41 = arith.cmpf olt, %arg2, %cst : f32
      %42 = arith.select %41, %cst, %arg2 : f32
      %43 = arith.cmpf olt, %cst_0, %arg2 : f32
      %44 = arith.select %43, %cst_0, %42 : f32
      linalg.yield %44 : f32
    }
    memref.dealloc %27 : memref<4x4xf32>
    %29 = memref.expand_shape %28 [[0, 1], [2]] : memref<4x4xf32> into memref<1x4x4xf32>
    %30 = memref.alloc() : memref<1x4x2xf32>
    linalg.fill(%cst, %30) : f32, memref<1x4x2xf32> 
    %31 = memref.alloc() : memref<1x4x2xf32>
    memref.copy %30, %31 : memref<1x4x2xf32> to memref<1x4x2xf32>
    memref.dealloc %30 : memref<1x4x2xf32>
    linalg.batch_matmul ins(%29, %8 : memref<1x4x4xf32>, memref<1x4x2xf32>) outs(%31 : memref<1x4x2xf32>)
    memref.dealloc %28 : memref<4x4xf32>
    %32 = memref.collapse_shape %31 [[0, 1], [2]] : memref<1x4x2xf32> into memref<4x2xf32>
    %33 = memref.alloc() : memref<4x2xf32>
    linalg.generic {indexing_maps = [#map4, #map5, #map4], iterator_types = ["parallel", "parallel"]} ins(%32, %1 : memref<4x2xf32>, memref<2xf32>) outs(%33 : memref<4x2xf32>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):
      %41 = arith.addf %arg2, %arg3 : f32
      linalg.yield %41 : f32
    }
    memref.dealloc %31 : memref<1x4x2xf32>
    %34 = memref.alloc() : memref<4x2xf32>
    linalg.generic {indexing_maps = [#map4, #map4], iterator_types = ["parallel", "parallel"]} ins(%33 : memref<4x2xf32>) outs(%34 : memref<4x2xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):
      %41 = math.exp %arg2 : f32
      linalg.yield %41 : f32
    }
    memref.dealloc %33 : memref<4x2xf32>
    %35 = memref.alloc() : memref<4xf32>
    linalg.fill(%cst, %35) : f32, memref<4xf32> 
    %36 = memref.alloc() : memref<4xf32>
    memref.copy %35, %36 : memref<4xf32> to memref<4xf32>
    memref.dealloc %35 : memref<4xf32>
    linalg.generic {indexing_maps = [#map4, #map6], iterator_types = ["parallel", "reduction"]} ins(%34 : memref<4x2xf32>) outs(%36 : memref<4xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):
      %41 = arith.addf %arg2, %arg3 : f32
      linalg.yield %41 : f32
    }
    %37 = memref.expand_shape %36 [[0, 1]] : memref<4xf32> into memref<4x1xf32>
    %38 = memref.alloc() : memref<4x1xf32>
    linalg.generic {indexing_maps = [#map4, #map4], iterator_types = ["parallel", "parallel"]} ins(%37 : memref<4x1xf32>) outs(%38 : memref<4x1xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):
      %41 = arith.divf %cst_1, %arg2 : f32
      linalg.yield %41 : f32
    }
    memref.dealloc %36 : memref<4xf32>
    %39 = memref.collapse_shape %38 [[0, 1]] : memref<4x1xf32> into memref<4xf32>
    %40 = memref.alloc() : memref<4x2xf32>
    linalg.generic {indexing_maps = [#map4, #map6, #map4], iterator_types = ["parallel", "parallel"]} ins(%34, %39 : memref<4x2xf32>, memref<4xf32>) outs(%40 : memref<4x2xf32>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):
      %41 = arith.mulf %arg2, %arg3 : f32
      linalg.yield %41 : f32
    }
    memref.dealloc %38 : memref<4x1xf32>
    memref.dealloc %34 : memref<4x2xf32>
    memref.copy %40, %arg1 : memref<4x2xf32> to memref<4x2xf32>
    return
  }
  soda.module @main_kernel {
    soda.func @main_kernel(%arg0: memref<1x4x8xf32>, %arg1: memref<1x8x4xf32>, %arg2: memref<1x4x4xf32>) kernel{
      cf.br ^bb1
    ^bb1:  // pred: ^bb0
      linalg.batch_matmul ins(%arg0, %arg1 : memref<1x4x8xf32>, memref<1x8x4xf32>) outs(%arg2 : memref<1x4x4xf32>)
      soda.return
    }
  }
}


// -----// IR Dump After TestArgumentsToXML //----- //
#map0 = affine_map<(d0, d1, d2, d3) -> (d0 * 1225 + d1 * 35 + d2 + d3 + 36)>
#map1 = affine_map<(d0, d1, d2, d3) -> (d3, d0, d1, d2)>
#map2 = affine_map<(d0, d1, d2, d3) -> (d0, d1, d2, d3)>
#map3 = affine_map<(d0, d1, d2, d3) -> (d3)>
#map4 = affine_map<(d0, d1) -> (d0, d1)>
#map5 = affine_map<(d0, d1) -> (d1)>
#map6 = affine_map<(d0, d1) -> (d0)>
module attributes {soda.container_module, tf.versions = {bad_consumers = [], min_consumer = 0 : i32, producer = 561 : i32}} {
  memref.global "private" constant @__constant_2xf32 : memref<2xf32> = dense<0.000000e+00>
  memref.global "private" constant @__constant_4xf32 : memref<4xf32> = dense<0.000000e+00>
  memref.global "private" constant @__constant_8xf32 : memref<8xf32> = dense<0.000000e+00>
  memref.global "private" constant @__constant_1xf32 : memref<1xf32> = dense<0.000000e+00>
  memref.global "private" constant @__constant_1x5x5x1xf32 : memref<1x5x5x1xf32> = dense<[[[[-0.144123852], [-0.203296721], [0.0245194137], [0.0424404144], [-5.772960e-02]], [[0.213269472], [-0.00469377637], [0.345114052], [0.136302114], [-0.259548783]], [[0.145365268], [0.112524837], [0.0500608087], [-0.0937015414], [-0.0550665557]], [[0.0901061296], [0.286698043], [0.111992478], [0.231037259], [-0.28824234]], [[-0.15258716], [-0.335655361], [0.156836212], [0.183970571], [0.124615282]]]]>
  memref.global "private" constant @__constant_1x256x8xf32 : memref<1x256x8xf32> = dense<"
  memref.global "private" constant @__constant_1x8x4xf32 : memref<1x8x4xf32> = dense<[[[-0.431032777, 0.339656174, -0.0172508955, 0.530783117], [-0.131361604, -0.686532557, 0.29633683, -0.190197289], [0.114347279, 0.56687206, -0.5206815, 0.0635936856], [0.278496087, -0.701272607, -0.192214727, 0.0925094485], [-0.263988972, 0.210848868, 0.702368438, -0.632420897], [0.552770555, -0.32865116, -0.0839602351, 0.335239589], [-0.466998219, -0.367347717, 0.669422566, 0.683026611], [-0.653910696, -0.016515851, 0.00850236415, 0.640155136]]]>
  memref.global "private" constant @__constant_1x4x2xf32 : memref<1x4x2xf32> = dense<[[[-0.649729251, -0.36405158], [0.711094856, -0.165482044], [-0.528160095, -0.548771381], [0.198056698, 0.657765388]]]>
  func @main(%arg0: memref<4x32x32x1xf32>, %arg1: memref<4x2xf32>) attributes {tf.entry_function = {control_outputs = "", inputs = "x1", outputs = "Identity"}} {
    %cst = arith.constant 0.000000e+00 : f32
    %cst_0 = arith.constant 3.40282347E+38 : f32
    %cst_1 = arith.constant 1.000000e+00 : f32
    %0 = memref.alloc() {alignment = 128 : i64} : memref<4x35x35x1xf32>
    %1 = memref.get_global @__constant_2xf32 : memref<2xf32>
    %2 = memref.get_global @__constant_4xf32 : memref<4xf32>
    %3 = memref.get_global @__constant_8xf32 : memref<8xf32>
    %4 = memref.get_global @__constant_1xf32 : memref<1xf32>
    %5 = memref.get_global @__constant_1x5x5x1xf32 : memref<1x5x5x1xf32>
    %6 = memref.get_global @__constant_1x256x8xf32 : memref<1x256x8xf32>
    %7 = memref.get_global @__constant_1x8x4xf32 : memref<1x8x4xf32>
    %8 = memref.get_global @__constant_1x4x2xf32 : memref<1x4x2xf32>
    %9 = memref.alloc() : memref<4x35x35x1xf32>
    linalg.fill(%cst, %9) : f32, memref<4x35x35x1xf32> 
    memref.copy %9, %0 : memref<4x35x35x1xf32> to memref<4x35x35x1xf32>
    memref.dealloc %9 : memref<4x35x35x1xf32>
    %10 = memref.subview %0[0, 1, 1, 0] [4, 32, 32, 1] [1, 1, 1, 1] : memref<4x35x35x1xf32> to memref<4x32x32x1xf32, #map0>
    memref.copy %arg0, %10 : memref<4x32x32x1xf32> to memref<4x32x32x1xf32, #map0>
    %11 = memref.alloc() : memref<5x5x1x1xf32>
    linalg.generic {indexing_maps = [#map1, #map2], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%5 : memref<1x5x5x1xf32>) outs(%11 : memref<5x5x1x1xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):
      linalg.yield %arg2 : f32
    }
    %12 = memref.alloc() : memref<4x16x16x1xf32>
    linalg.fill(%cst, %12) : f32, memref<4x16x16x1xf32> 
    %13 = memref.alloc() : memref<4x16x16x1xf32>
    memref.copy %12, %13 : memref<4x16x16x1xf32> to memref<4x16x16x1xf32>
    memref.dealloc %12 : memref<4x16x16x1xf32>
    linalg.conv_2d_nhwc_hwcf {dilations = dense<1> : tensor<2xi64>, strides = dense<2> : tensor<2xi64>} ins(%0, %11 : memref<4x35x35x1xf32>, memref<5x5x1x1xf32>) outs(%13 : memref<4x16x16x1xf32>)
    memref.dealloc %11 : memref<5x5x1x1xf32>
    memref.dealloc %0 : memref<4x35x35x1xf32>
    %14 = memref.alloc() : memref<4x16x16x1xf32>
    linalg.generic {indexing_maps = [#map3, #map2, #map2], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%4, %13 : memref<1xf32>, memref<4x16x16x1xf32>) outs(%14 : memref<4x16x16x1xf32>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):
      %41 = arith.addf %arg2, %arg3 : f32
      linalg.yield %41 : f32
    }
    memref.dealloc %13 : memref<4x16x16x1xf32>
    %15 = memref.alloc() : memref<4x16x16x1xf32>
    linalg.generic {indexing_maps = [#map2, #map2], iterator_types = ["parallel", "parallel", "parallel", "parallel"]} ins(%14 : memref<4x16x16x1xf32>) outs(%15 : memref<4x16x16x1xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):
      %41 = arith.cmpf olt, %arg2, %cst : f32
      %42 = arith.select %41, %cst, %arg2 : f32
      %43 = arith.cmpf olt, %cst_0, %arg2 : f32
      %44 = arith.select %43, %cst_0, %42 : f32
      linalg.yield %44 : f32
    }
    memref.dealloc %14 : memref<4x16x16x1xf32>
    %16 = memref.collapse_shape %15 [[0], [1, 2, 3]] : memref<4x16x16x1xf32> into memref<4x256xf32>
    %17 = memref.expand_shape %16 [[0, 1], [2]] : memref<4x256xf32> into memref<1x4x256xf32>
    %18 = memref.alloc() : memref<1x4x8xf32>
    linalg.fill(%cst, %18) : f32, memref<1x4x8xf32> 
    %19 = memref.alloc() : memref<1x4x8xf32>
    memref.copy %18, %19 : memref<1x4x8xf32> to memref<1x4x8xf32>
    memref.dealloc %18 : memref<1x4x8xf32>
    linalg.batch_matmul ins(%17, %6 : memref<1x4x256xf32>, memref<1x256x8xf32>) outs(%19 : memref<1x4x8xf32>)
    memref.dealloc %15 : memref<4x16x16x1xf32>
    %20 = memref.collapse_shape %19 [[0, 1], [2]] : memref<1x4x8xf32> into memref<4x8xf32>
    %21 = memref.alloc() : memref<4x8xf32>
    linalg.generic {indexing_maps = [#map4, #map5, #map4], iterator_types = ["parallel", "parallel"]} ins(%20, %3 : memref<4x8xf32>, memref<8xf32>) outs(%21 : memref<4x8xf32>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):
      %41 = arith.addf %arg2, %arg3 : f32
      linalg.yield %41 : f32
    }
    memref.dealloc %19 : memref<1x4x8xf32>
    %22 = memref.alloc() : memref<4x8xf32>
    linalg.generic {indexing_maps = [#map4, #map4], iterator_types = ["parallel", "parallel"]} ins(%21 : memref<4x8xf32>) outs(%22 : memref<4x8xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):
      %41 = arith.cmpf olt, %arg2, %cst : f32
      %42 = arith.select %41, %cst, %arg2 : f32
      %43 = arith.cmpf olt, %cst_0, %arg2 : f32
      %44 = arith.select %43, %cst_0, %42 : f32
      linalg.yield %44 : f32
    }
    memref.dealloc %21 : memref<4x8xf32>
    %23 = memref.expand_shape %22 [[0, 1], [2]] : memref<4x8xf32> into memref<1x4x8xf32>
    %24 = memref.alloc() : memref<1x4x4xf32>
    linalg.fill(%cst, %24) : f32, memref<1x4x4xf32> 
    %25 = memref.alloc() : memref<1x4x4xf32>
    memref.copy %24, %25 : memref<1x4x4xf32> to memref<1x4x4xf32>
    memref.dealloc %24 : memref<1x4x4xf32>
    soda.launch_func  @main_kernel::@main_kernel args(%23 : memref<1x4x8xf32>, %7 : memref<1x8x4xf32>, %25 : memref<1x4x4xf32>)
    memref.dealloc %22 : memref<4x8xf32>
    %26 = memref.collapse_shape %25 [[0, 1], [2]] : memref<1x4x4xf32> into memref<4x4xf32>
    %27 = memref.alloc() : memref<4x4xf32>
    linalg.generic {indexing_maps = [#map4, #map5, #map4], iterator_types = ["parallel", "parallel"]} ins(%26, %2 : memref<4x4xf32>, memref<4xf32>) outs(%27 : memref<4x4xf32>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):
      %41 = arith.addf %arg2, %arg3 : f32
      linalg.yield %41 : f32
    }
    memref.dealloc %25 : memref<1x4x4xf32>
    %28 = memref.alloc() : memref<4x4xf32>
    linalg.generic {indexing_maps = [#map4, #map4], iterator_types = ["parallel", "parallel"]} ins(%27 : memref<4x4xf32>) outs(%28 : memref<4x4xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):
      %41 = arith.cmpf olt, %arg2, %cst : f32
      %42 = arith.select %41, %cst, %arg2 : f32
      %43 = arith.cmpf olt, %cst_0, %arg2 : f32
      %44 = arith.select %43, %cst_0, %42 : f32
      linalg.yield %44 : f32
    }
    memref.dealloc %27 : memref<4x4xf32>
    %29 = memref.expand_shape %28 [[0, 1], [2]] : memref<4x4xf32> into memref<1x4x4xf32>
    %30 = memref.alloc() : memref<1x4x2xf32>
    linalg.fill(%cst, %30) : f32, memref<1x4x2xf32> 
    %31 = memref.alloc() : memref<1x4x2xf32>
    memref.copy %30, %31 : memref<1x4x2xf32> to memref<1x4x2xf32>
    memref.dealloc %30 : memref<1x4x2xf32>
    linalg.batch_matmul ins(%29, %8 : memref<1x4x4xf32>, memref<1x4x2xf32>) outs(%31 : memref<1x4x2xf32>)
    memref.dealloc %28 : memref<4x4xf32>
    %32 = memref.collapse_shape %31 [[0, 1], [2]] : memref<1x4x2xf32> into memref<4x2xf32>
    %33 = memref.alloc() : memref<4x2xf32>
    linalg.generic {indexing_maps = [#map4, #map5, #map4], iterator_types = ["parallel", "parallel"]} ins(%32, %1 : memref<4x2xf32>, memref<2xf32>) outs(%33 : memref<4x2xf32>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):
      %41 = arith.addf %arg2, %arg3 : f32
      linalg.yield %41 : f32
    }
    memref.dealloc %31 : memref<1x4x2xf32>
    %34 = memref.alloc() : memref<4x2xf32>
    linalg.generic {indexing_maps = [#map4, #map4], iterator_types = ["parallel", "parallel"]} ins(%33 : memref<4x2xf32>) outs(%34 : memref<4x2xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):
      %41 = math.exp %arg2 : f32
      linalg.yield %41 : f32
    }
    memref.dealloc %33 : memref<4x2xf32>
    %35 = memref.alloc() : memref<4xf32>
    linalg.fill(%cst, %35) : f32, memref<4xf32> 
    %36 = memref.alloc() : memref<4xf32>
    memref.copy %35, %36 : memref<4xf32> to memref<4xf32>
    memref.dealloc %35 : memref<4xf32>
    linalg.generic {indexing_maps = [#map4, #map6], iterator_types = ["parallel", "reduction"]} ins(%34 : memref<4x2xf32>) outs(%36 : memref<4xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):
      %41 = arith.addf %arg2, %arg3 : f32
      linalg.yield %41 : f32
    }
    %37 = memref.expand_shape %36 [[0, 1]] : memref<4xf32> into memref<4x1xf32>
    %38 = memref.alloc() : memref<4x1xf32>
    linalg.generic {indexing_maps = [#map4, #map4], iterator_types = ["parallel", "parallel"]} ins(%37 : memref<4x1xf32>) outs(%38 : memref<4x1xf32>) {
    ^bb0(%arg2: f32, %arg3: f32):
      %41 = arith.divf %cst_1, %arg2 : f32
      linalg.yield %41 : f32
    }
    memref.dealloc %36 : memref<4xf32>
    %39 = memref.collapse_shape %38 [[0, 1]] : memref<4x1xf32> into memref<4xf32>
    %40 = memref.alloc() : memref<4x2xf32>
    linalg.generic {indexing_maps = [#map4, #map6, #map4], iterator_types = ["parallel", "parallel"]} ins(%34, %39 : memref<4x2xf32>, memref<4xf32>) outs(%40 : memref<4x2xf32>) {
    ^bb0(%arg2: f32, %arg3: f32, %arg4: f32):
      %41 = arith.mulf %arg2, %arg3 : f32
      linalg.yield %41 : f32
    }
    memref.dealloc %38 : memref<4x1xf32>
    memref.dealloc %34 : memref<4x2xf32>
    memref.copy %40, %arg1 : memref<4x2xf32> to memref<4x2xf32>
    return
  }
  soda.module @main_kernel {
    soda.func @main_kernel(%arg0: memref<1x4x8xf32>, %arg1: memref<1x8x4xf32>, %arg2: memref<1x4x4xf32>) kernel{
      cf.br ^bb1
    ^bb1:  // pred: ^bb0
      linalg.batch_matmul ins(%arg0, %arg1 : memref<1x4x8xf32>, memref<1x8x4xf32>) outs(%arg2 : memref<1x4x4xf32>)
      soda.return
    }
  }
}


// -----// IR Dump After SodaKernelGeneration //----- //
module attributes {soda.bambu.container_module, soda.container_module, tf.versions = {bad_consumers = [], min_consumer = 0 : i32, producer = 561 : i32}} {
  func @main_kernel(%arg0: memref<1x4x8xf32>, %arg1: memref<1x8x4xf32>, %arg2: memref<1x4x4xf32>) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    linalg.batch_matmul ins(%arg0, %arg1 : memref<1x4x8xf32>, memref<1x8x4xf32>) outs(%arg2 : memref<1x4x4xf32>)
    return
  }
}


// -----// IR Dump After LinalgLowerToAffineLoops //----- //
func @main_kernel(%arg0: memref<1x4x8xf32>, %arg1: memref<1x8x4xf32>, %arg2: memref<1x4x4xf32>) {
  cf.br ^bb1
^bb1:  // pred: ^bb0
  affine.for %arg3 = 0 to 1 {
    affine.for %arg4 = 0 to 4 {
      affine.for %arg5 = 0 to 4 {
        affine.for %arg6 = 0 to 8 {
          %0 = affine.load %arg0[%arg3, %arg4, %arg6] : memref<1x4x8xf32>
          %1 = affine.load %arg1[%arg3, %arg6, %arg5] : memref<1x8x4xf32>
          %2 = affine.load %arg2[%arg3, %arg4, %arg5] : memref<1x4x4xf32>
          %3 = arith.mulf %0, %1 : f32
          %4 = arith.addf %2, %3 : f32
          affine.store %4, %arg2[%arg3, %arg4, %arg5] : memref<1x4x4xf32>
        }
      }
    }
  }
  return
}

// -----// IR Dump After ConvertAffineToStandard //----- //
module attributes {soda.bambu.container_module, soda.container_module, tf.versions = {bad_consumers = [], min_consumer = 0 : i32, producer = 561 : i32}} {
  func @main_kernel(%arg0: memref<1x4x8xf32>, %arg1: memref<1x8x4xf32>, %arg2: memref<1x4x4xf32>) {
    cf.br ^bb1
  ^bb1:  // pred: ^bb0
    %c0 = arith.constant 0 : index
    %c1 = arith.constant 1 : index
    %c1_0 = arith.constant 1 : index
    scf.for %arg3 = %c0 to %c1 step %c1_0 {
      %c0_1 = arith.constant 0 : index
      %c4 = arith.constant 4 : index
      %c1_2 = arith.constant 1 : index
      scf.for %arg4 = %c0_1 to %c4 step %c1_2 {
        %c0_3 = arith.constant 0 : index
        %c4_4 = arith.constant 4 : index
        %c1_5 = arith.constant 1 : index
        scf.for %arg5 = %c0_3 to %c4_4 step %c1_5 {
          %c0_6 = arith.constant 0 : index
          %c8 = arith.constant 8 : index
          %c1_7 = arith.constant 1 : index
          scf.for %arg6 = %c0_6 to %c8 step %c1_7 {
            %0 = memref.load %arg0[%arg3, %arg4, %arg6] : memref<1x4x8xf32>
            %1 = memref.load %arg1[%arg3, %arg6, %arg5] : memref<1x8x4xf32>
            %2 = memref.load %arg2[%arg3, %arg4, %arg5] : memref<1x4x4xf32>
            %3 = arith.mulf %0, %1 : f32
            %4 = arith.addf %2, %3 : f32
            memref.store %4, %arg2[%arg3, %arg4, %arg5] : memref<1x4x4xf32>
          }
        }
      }
    }
    return
  }
}


// -----// IR Dump After Canonicalizer //----- //
module attributes {soda.bambu.container_module, soda.container_module, tf.versions = {bad_consumers = [], min_consumer = 0 : i32, producer = 561 : i32}} {
  func @main_kernel(%arg0: memref<1x4x8xf32>, %arg1: memref<1x8x4xf32>, %arg2: memref<1x4x4xf32>) {
    %c8 = arith.constant 8 : index
    %c1 = arith.constant 1 : index
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    scf.for %arg3 = %c0 to %c4 step %c1 {
      scf.for %arg4 = %c0 to %c4 step %c1 {
        scf.for %arg5 = %c0 to %c8 step %c1 {
          %0 = memref.load %arg0[%c0, %arg3, %arg5] : memref<1x4x8xf32>
          %1 = memref.load %arg1[%c0, %arg5, %arg4] : memref<1x8x4xf32>
          %2 = memref.load %arg2[%c0, %arg3, %arg4] : memref<1x4x4xf32>
          %3 = arith.mulf %0, %1 : f32
          %4 = arith.addf %2, %3 : f32
          memref.store %4, %arg2[%c0, %arg3, %arg4] : memref<1x4x4xf32>
        }
      }
    }
    return
  }
}


// -----// IR Dump After CSE //----- //
module attributes {soda.bambu.container_module, soda.container_module, tf.versions = {bad_consumers = [], min_consumer = 0 : i32, producer = 561 : i32}} {
  func @main_kernel(%arg0: memref<1x4x8xf32>, %arg1: memref<1x8x4xf32>, %arg2: memref<1x4x4xf32>) {
    %c8 = arith.constant 8 : index
    %c1 = arith.constant 1 : index
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    scf.for %arg3 = %c0 to %c4 step %c1 {
      scf.for %arg4 = %c0 to %c4 step %c1 {
        scf.for %arg5 = %c0 to %c8 step %c1 {
          %0 = memref.load %arg0[%c0, %arg3, %arg5] : memref<1x4x8xf32>
          %1 = memref.load %arg1[%c0, %arg5, %arg4] : memref<1x8x4xf32>
          %2 = memref.load %arg2[%c0, %arg3, %arg4] : memref<1x4x4xf32>
          %3 = arith.mulf %0, %1 : f32
          %4 = arith.addf %2, %3 : f32
          memref.store %4, %arg2[%c0, %arg3, %arg4] : memref<1x4x4xf32>
        }
      }
    }
    return
  }
}


// -----// IR Dump After SCFToControlFlow //----- //
module attributes {soda.bambu.container_module, soda.container_module, tf.versions = {bad_consumers = [], min_consumer = 0 : i32, producer = 561 : i32}} {
  func @main_kernel(%arg0: memref<1x4x8xf32>, %arg1: memref<1x8x4xf32>, %arg2: memref<1x4x4xf32>) {
    %c8 = arith.constant 8 : index
    %c1 = arith.constant 1 : index
    %c4 = arith.constant 4 : index
    %c0 = arith.constant 0 : index
    cf.br ^bb1(%c0 : index)
  ^bb1(%0: index):  // 2 preds: ^bb0, ^bb8
    %1 = arith.cmpi slt, %0, %c4 : index
    cf.cond_br %1, ^bb2, ^bb9
  ^bb2:  // pred: ^bb1
    cf.br ^bb3(%c0 : index)
  ^bb3(%2: index):  // 2 preds: ^bb2, ^bb7
    %3 = arith.cmpi slt, %2, %c4 : index
    cf.cond_br %3, ^bb4, ^bb8
  ^bb4:  // pred: ^bb3
    cf.br ^bb5(%c0 : index)
  ^bb5(%4: index):  // 2 preds: ^bb4, ^bb6
    %5 = arith.cmpi slt, %4, %c8 : index
    cf.cond_br %5, ^bb6, ^bb7
  ^bb6:  // pred: ^bb5
    %6 = memref.load %arg0[%c0, %0, %4] : memref<1x4x8xf32>
    %7 = memref.load %arg1[%c0, %4, %2] : memref<1x8x4xf32>
    %8 = memref.load %arg2[%c0, %0, %2] : memref<1x4x4xf32>
    %9 = arith.mulf %6, %7 : f32
    %10 = arith.addf %8, %9 : f32
    memref.store %10, %arg2[%c0, %0, %2] : memref<1x4x4xf32>
    %11 = arith.addi %4, %c1 : index
    cf.br ^bb5(%11 : index)
  ^bb7:  // pred: ^bb5
    %12 = arith.addi %2, %c1 : index
    cf.br ^bb3(%12 : index)
  ^bb8:  // pred: ^bb3
    %13 = arith.addi %0, %c1 : index
    cf.br ^bb1(%13 : index)
  ^bb9:  // pred: ^bb1
    return
  }
}


// -----// IR Dump After Canonicalizer //----- //
module attributes {soda.bambu.container_module, soda.container_module, tf.versions = {bad_consumers = [], min_consumer = 0 : i32, producer = 561 : i32}} {
  func @main_kernel(%arg0: memref<1x4x8xf32>, %arg1: memref<1x8x4xf32>, %arg2: memref<1x4x4xf32>) {
    %c0 = arith.constant 0 : index
    %c4 = arith.constant 4 : index
    %c1 = arith.constant 1 : index
    %c8 = arith.constant 8 : index
    cf.br ^bb1(%c0 : index)
  ^bb1(%0: index):  // 2 preds: ^bb0, ^bb6
    %1 = arith.cmpi slt, %0, %c4 : index
    cf.cond_br %1, ^bb2(%c0 : index), ^bb7
  ^bb2(%2: index):  // 2 preds: ^bb1, ^bb5
    %3 = arith.cmpi slt, %2, %c4 : index
    cf.cond_br %3, ^bb3(%c0 : index), ^bb6
  ^bb3(%4: index):  // 2 preds: ^bb2, ^bb4
    %5 = arith.cmpi slt, %4, %c8 : index
    cf.cond_br %5, ^bb4, ^bb5
  ^bb4:  // pred: ^bb3
    %6 = memref.load %arg0[%c0, %0, %4] : memref<1x4x8xf32>
    %7 = memref.load %arg1[%c0, %4, %2] : memref<1x8x4xf32>
    %8 = memref.load %arg2[%c0, %0, %2] : memref<1x4x4xf32>
    %9 = arith.mulf %6, %7 : f32
    %10 = arith.addf %8, %9 : f32
    memref.store %10, %arg2[%c0, %0, %2] : memref<1x4x4xf32>
    %11 = arith.addi %4, %c1 : index
    cf.br ^bb3(%11 : index)
  ^bb5:  // pred: ^bb3
    %12 = arith.addi %2, %c1 : index
    cf.br ^bb2(%12 : index)
  ^bb6:  // pred: ^bb2
    %13 = arith.addi %0, %c1 : index
    cf.br ^bb1(%13 : index)
  ^bb7:  // pred: ^bb1
    return
  }
}


// -----// IR Dump After CSE //----- //
module attributes {soda.bambu.container_module, soda.container_module, tf.versions = {bad_consumers = [], min_consumer = 0 : i32, producer = 561 : i32}} {
  func @main_kernel(%arg0: memref<1x4x8xf32>, %arg1: memref<1x8x4xf32>, %arg2: memref<1x4x4xf32>) {
    %c0 = arith.constant 0 : index
    %c4 = arith.constant 4 : index
    %c1 = arith.constant 1 : index
    %c8 = arith.constant 8 : index
    cf.br ^bb1(%c0 : index)
  ^bb1(%0: index):  // 2 preds: ^bb0, ^bb6
    %1 = arith.cmpi slt, %0, %c4 : index
    cf.cond_br %1, ^bb2(%c0 : index), ^bb7
  ^bb2(%2: index):  // 2 preds: ^bb1, ^bb5
    %3 = arith.cmpi slt, %2, %c4 : index
    cf.cond_br %3, ^bb3(%c0 : index), ^bb6
  ^bb3(%4: index):  // 2 preds: ^bb2, ^bb4
    %5 = arith.cmpi slt, %4, %c8 : index
    cf.cond_br %5, ^bb4, ^bb5
  ^bb4:  // pred: ^bb3
    %6 = memref.load %arg0[%c0, %0, %4] : memref<1x4x8xf32>
    %7 = memref.load %arg1[%c0, %4, %2] : memref<1x8x4xf32>
    %8 = memref.load %arg2[%c0, %0, %2] : memref<1x4x4xf32>
    %9 = arith.mulf %6, %7 : f32
    %10 = arith.addf %8, %9 : f32
    memref.store %10, %arg2[%c0, %0, %2] : memref<1x4x4xf32>
    %11 = arith.addi %4, %c1 : index
    cf.br ^bb3(%11 : index)
  ^bb5:  // pred: ^bb3
    %12 = arith.addi %2, %c1 : index
    cf.br ^bb2(%12 : index)
  ^bb6:  // pred: ^bb2
    %13 = arith.addi %0, %c1 : index
    cf.br ^bb1(%13 : index)
  ^bb7:  // pred: ^bb1
    return
  }
}


// -----// IR Dump After ConvertMemRefToLLVM //----- //
module attributes {soda.bambu.container_module, soda.container_module, tf.versions = {bad_consumers = [], min_consumer = 0 : i32, producer = 561 : i32}} {
  func @main_kernel(%arg0: memref<1x4x8xf32>, %arg1: memref<1x8x4xf32>, %arg2: memref<1x4x4xf32>) {
    %0 = builtin.unrealized_conversion_cast %arg0 : memref<1x4x8xf32> to !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %1 = builtin.unrealized_conversion_cast %arg1 : memref<1x8x4xf32> to !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %2 = builtin.unrealized_conversion_cast %arg2 : memref<1x4x4xf32> to !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %c0 = arith.constant 0 : index
    %3 = builtin.unrealized_conversion_cast %c0 : index to i64
    %c4 = arith.constant 4 : index
    %c1 = arith.constant 1 : index
    %c8 = arith.constant 8 : index
    cf.br ^bb1(%c0 : index)
  ^bb1(%4: index):  // 2 preds: ^bb0, ^bb6
    %5 = builtin.unrealized_conversion_cast %4 : index to i64
    %6 = arith.cmpi slt, %4, %c4 : index
    cf.cond_br %6, ^bb2(%c0 : index), ^bb7
  ^bb2(%7: index):  // 2 preds: ^bb1, ^bb5
    %8 = builtin.unrealized_conversion_cast %7 : index to i64
    %9 = arith.cmpi slt, %7, %c4 : index
    cf.cond_br %9, ^bb3(%c0 : index), ^bb6
  ^bb3(%10: index):  // 2 preds: ^bb2, ^bb4
    %11 = builtin.unrealized_conversion_cast %10 : index to i64
    %12 = arith.cmpi slt, %10, %c8 : index
    cf.cond_br %12, ^bb4, ^bb5
  ^bb4:  // pred: ^bb3
    %13 = llvm.extractvalue %0[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %14 = llvm.mlir.constant(32 : index) : i64
    %15 = llvm.mul %3, %14  : i64
    %16 = llvm.mlir.constant(8 : index) : i64
    %17 = llvm.mul %5, %16  : i64
    %18 = llvm.add %15, %17  : i64
    %19 = llvm.add %18, %11  : i64
    %20 = llvm.getelementptr %13[%19] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %21 = llvm.load %20 : !llvm.ptr<f32>
    %22 = llvm.extractvalue %1[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %23 = llvm.mlir.constant(32 : index) : i64
    %24 = llvm.mul %3, %23  : i64
    %25 = llvm.mlir.constant(4 : index) : i64
    %26 = llvm.mul %11, %25  : i64
    %27 = llvm.add %24, %26  : i64
    %28 = llvm.add %27, %8  : i64
    %29 = llvm.getelementptr %22[%28] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %30 = llvm.load %29 : !llvm.ptr<f32>
    %31 = llvm.extractvalue %2[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %32 = llvm.mlir.constant(16 : index) : i64
    %33 = llvm.mul %3, %32  : i64
    %34 = llvm.mlir.constant(4 : index) : i64
    %35 = llvm.mul %5, %34  : i64
    %36 = llvm.add %33, %35  : i64
    %37 = llvm.add %36, %8  : i64
    %38 = llvm.getelementptr %31[%37] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %39 = llvm.load %38 : !llvm.ptr<f32>
    %40 = arith.mulf %21, %30 : f32
    %41 = arith.addf %39, %40 : f32
    %42 = llvm.extractvalue %2[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %43 = llvm.mlir.constant(16 : index) : i64
    %44 = llvm.mul %3, %43  : i64
    %45 = llvm.mlir.constant(4 : index) : i64
    %46 = llvm.mul %5, %45  : i64
    %47 = llvm.add %44, %46  : i64
    %48 = llvm.add %47, %8  : i64
    %49 = llvm.getelementptr %42[%48] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    llvm.store %41, %49 : !llvm.ptr<f32>
    %50 = arith.addi %10, %c1 : index
    cf.br ^bb3(%50 : index)
  ^bb5:  // pred: ^bb3
    %51 = arith.addi %7, %c1 : index
    cf.br ^bb2(%51 : index)
  ^bb6:  // pred: ^bb2
    %52 = arith.addi %4, %c1 : index
    cf.br ^bb1(%52 : index)
  ^bb7:  // pred: ^bb1
    return
  }
}


// -----// IR Dump After ConvertMathToLLVM //----- //
func @main_kernel(%arg0: memref<1x4x8xf32>, %arg1: memref<1x8x4xf32>, %arg2: memref<1x4x4xf32>) {
  %0 = builtin.unrealized_conversion_cast %arg0 : memref<1x4x8xf32> to !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
  %1 = builtin.unrealized_conversion_cast %arg1 : memref<1x8x4xf32> to !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
  %2 = builtin.unrealized_conversion_cast %arg2 : memref<1x4x4xf32> to !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
  %c0 = arith.constant 0 : index
  %3 = builtin.unrealized_conversion_cast %c0 : index to i64
  %c4 = arith.constant 4 : index
  %c1 = arith.constant 1 : index
  %c8 = arith.constant 8 : index
  cf.br ^bb1(%c0 : index)
^bb1(%4: index):  // 2 preds: ^bb0, ^bb6
  %5 = builtin.unrealized_conversion_cast %4 : index to i64
  %6 = arith.cmpi slt, %4, %c4 : index
  cf.cond_br %6, ^bb2(%c0 : index), ^bb7
^bb2(%7: index):  // 2 preds: ^bb1, ^bb5
  %8 = builtin.unrealized_conversion_cast %7 : index to i64
  %9 = arith.cmpi slt, %7, %c4 : index
  cf.cond_br %9, ^bb3(%c0 : index), ^bb6
^bb3(%10: index):  // 2 preds: ^bb2, ^bb4
  %11 = builtin.unrealized_conversion_cast %10 : index to i64
  %12 = arith.cmpi slt, %10, %c8 : index
  cf.cond_br %12, ^bb4, ^bb5
^bb4:  // pred: ^bb3
  %13 = llvm.extractvalue %0[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
  %14 = llvm.mlir.constant(32 : index) : i64
  %15 = llvm.mul %3, %14  : i64
  %16 = llvm.mlir.constant(8 : index) : i64
  %17 = llvm.mul %5, %16  : i64
  %18 = llvm.add %15, %17  : i64
  %19 = llvm.add %18, %11  : i64
  %20 = llvm.getelementptr %13[%19] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
  %21 = llvm.load %20 : !llvm.ptr<f32>
  %22 = llvm.extractvalue %1[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
  %23 = llvm.mlir.constant(32 : index) : i64
  %24 = llvm.mul %3, %23  : i64
  %25 = llvm.mlir.constant(4 : index) : i64
  %26 = llvm.mul %11, %25  : i64
  %27 = llvm.add %24, %26  : i64
  %28 = llvm.add %27, %8  : i64
  %29 = llvm.getelementptr %22[%28] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
  %30 = llvm.load %29 : !llvm.ptr<f32>
  %31 = llvm.extractvalue %2[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
  %32 = llvm.mlir.constant(16 : index) : i64
  %33 = llvm.mul %3, %32  : i64
  %34 = llvm.mlir.constant(4 : index) : i64
  %35 = llvm.mul %5, %34  : i64
  %36 = llvm.add %33, %35  : i64
  %37 = llvm.add %36, %8  : i64
  %38 = llvm.getelementptr %31[%37] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
  %39 = llvm.load %38 : !llvm.ptr<f32>
  %40 = arith.mulf %21, %30 : f32
  %41 = arith.addf %39, %40 : f32
  %42 = llvm.extractvalue %2[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
  %43 = llvm.mlir.constant(16 : index) : i64
  %44 = llvm.mul %3, %43  : i64
  %45 = llvm.mlir.constant(4 : index) : i64
  %46 = llvm.mul %5, %45  : i64
  %47 = llvm.add %44, %46  : i64
  %48 = llvm.add %47, %8  : i64
  %49 = llvm.getelementptr %42[%48] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
  llvm.store %41, %49 : !llvm.ptr<f32>
  %50 = arith.addi %10, %c1 : index
  cf.br ^bb3(%50 : index)
^bb5:  // pred: ^bb3
  %51 = arith.addi %7, %c1 : index
  cf.br ^bb2(%51 : index)
^bb6:  // pred: ^bb2
  %52 = arith.addi %4, %c1 : index
  cf.br ^bb1(%52 : index)
^bb7:  // pred: ^bb1
  return
}

// -----// IR Dump After ConvertMathToLibm //----- //
module attributes {soda.bambu.container_module, soda.container_module, tf.versions = {bad_consumers = [], min_consumer = 0 : i32, producer = 561 : i32}} {
  func @main_kernel(%arg0: memref<1x4x8xf32>, %arg1: memref<1x8x4xf32>, %arg2: memref<1x4x4xf32>) {
    %0 = builtin.unrealized_conversion_cast %arg0 : memref<1x4x8xf32> to !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %1 = builtin.unrealized_conversion_cast %arg1 : memref<1x8x4xf32> to !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %2 = builtin.unrealized_conversion_cast %arg2 : memref<1x4x4xf32> to !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %c0 = arith.constant 0 : index
    %3 = builtin.unrealized_conversion_cast %c0 : index to i64
    %c4 = arith.constant 4 : index
    %c1 = arith.constant 1 : index
    %c8 = arith.constant 8 : index
    cf.br ^bb1(%c0 : index)
  ^bb1(%4: index):  // 2 preds: ^bb0, ^bb6
    %5 = builtin.unrealized_conversion_cast %4 : index to i64
    %6 = arith.cmpi slt, %4, %c4 : index
    cf.cond_br %6, ^bb2(%c0 : index), ^bb7
  ^bb2(%7: index):  // 2 preds: ^bb1, ^bb5
    %8 = builtin.unrealized_conversion_cast %7 : index to i64
    %9 = arith.cmpi slt, %7, %c4 : index
    cf.cond_br %9, ^bb3(%c0 : index), ^bb6
  ^bb3(%10: index):  // 2 preds: ^bb2, ^bb4
    %11 = builtin.unrealized_conversion_cast %10 : index to i64
    %12 = arith.cmpi slt, %10, %c8 : index
    cf.cond_br %12, ^bb4, ^bb5
  ^bb4:  // pred: ^bb3
    %13 = llvm.extractvalue %0[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %14 = llvm.mlir.constant(32 : index) : i64
    %15 = llvm.mul %3, %14  : i64
    %16 = llvm.mlir.constant(8 : index) : i64
    %17 = llvm.mul %5, %16  : i64
    %18 = llvm.add %15, %17  : i64
    %19 = llvm.add %18, %11  : i64
    %20 = llvm.getelementptr %13[%19] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %21 = llvm.load %20 : !llvm.ptr<f32>
    %22 = llvm.extractvalue %1[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %23 = llvm.mlir.constant(32 : index) : i64
    %24 = llvm.mul %3, %23  : i64
    %25 = llvm.mlir.constant(4 : index) : i64
    %26 = llvm.mul %11, %25  : i64
    %27 = llvm.add %24, %26  : i64
    %28 = llvm.add %27, %8  : i64
    %29 = llvm.getelementptr %22[%28] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %30 = llvm.load %29 : !llvm.ptr<f32>
    %31 = llvm.extractvalue %2[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %32 = llvm.mlir.constant(16 : index) : i64
    %33 = llvm.mul %3, %32  : i64
    %34 = llvm.mlir.constant(4 : index) : i64
    %35 = llvm.mul %5, %34  : i64
    %36 = llvm.add %33, %35  : i64
    %37 = llvm.add %36, %8  : i64
    %38 = llvm.getelementptr %31[%37] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %39 = llvm.load %38 : !llvm.ptr<f32>
    %40 = arith.mulf %21, %30 : f32
    %41 = arith.addf %39, %40 : f32
    %42 = llvm.extractvalue %2[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %43 = llvm.mlir.constant(16 : index) : i64
    %44 = llvm.mul %3, %43  : i64
    %45 = llvm.mlir.constant(4 : index) : i64
    %46 = llvm.mul %5, %45  : i64
    %47 = llvm.add %44, %46  : i64
    %48 = llvm.add %47, %8  : i64
    %49 = llvm.getelementptr %42[%48] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    llvm.store %41, %49 : !llvm.ptr<f32>
    %50 = arith.addi %10, %c1 : index
    cf.br ^bb3(%50 : index)
  ^bb5:  // pred: ^bb3
    %51 = arith.addi %7, %c1 : index
    cf.br ^bb2(%51 : index)
  ^bb6:  // pred: ^bb2
    %52 = arith.addi %4, %c1 : index
    cf.br ^bb1(%52 : index)
  ^bb7:  // pred: ^bb1
    return
  }
}


// -----// IR Dump After ArithmeticExpandOps //----- //
module attributes {soda.bambu.container_module, soda.container_module, tf.versions = {bad_consumers = [], min_consumer = 0 : i32, producer = 561 : i32}} {
  func @main_kernel(%arg0: memref<1x4x8xf32>, %arg1: memref<1x8x4xf32>, %arg2: memref<1x4x4xf32>) {
    %0 = builtin.unrealized_conversion_cast %arg0 : memref<1x4x8xf32> to !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %1 = builtin.unrealized_conversion_cast %arg1 : memref<1x8x4xf32> to !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %2 = builtin.unrealized_conversion_cast %arg2 : memref<1x4x4xf32> to !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %c0 = arith.constant 0 : index
    %3 = builtin.unrealized_conversion_cast %c0 : index to i64
    %c4 = arith.constant 4 : index
    %c1 = arith.constant 1 : index
    %c8 = arith.constant 8 : index
    cf.br ^bb1(%c0 : index)
  ^bb1(%4: index):  // 2 preds: ^bb0, ^bb6
    %5 = builtin.unrealized_conversion_cast %4 : index to i64
    %6 = arith.cmpi slt, %4, %c4 : index
    cf.cond_br %6, ^bb2(%c0 : index), ^bb7
  ^bb2(%7: index):  // 2 preds: ^bb1, ^bb5
    %8 = builtin.unrealized_conversion_cast %7 : index to i64
    %9 = arith.cmpi slt, %7, %c4 : index
    cf.cond_br %9, ^bb3(%c0 : index), ^bb6
  ^bb3(%10: index):  // 2 preds: ^bb2, ^bb4
    %11 = builtin.unrealized_conversion_cast %10 : index to i64
    %12 = arith.cmpi slt, %10, %c8 : index
    cf.cond_br %12, ^bb4, ^bb5
  ^bb4:  // pred: ^bb3
    %13 = llvm.extractvalue %0[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %14 = llvm.mlir.constant(32 : index) : i64
    %15 = llvm.mul %3, %14  : i64
    %16 = llvm.mlir.constant(8 : index) : i64
    %17 = llvm.mul %5, %16  : i64
    %18 = llvm.add %15, %17  : i64
    %19 = llvm.add %18, %11  : i64
    %20 = llvm.getelementptr %13[%19] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %21 = llvm.load %20 : !llvm.ptr<f32>
    %22 = llvm.extractvalue %1[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %23 = llvm.mlir.constant(32 : index) : i64
    %24 = llvm.mul %3, %23  : i64
    %25 = llvm.mlir.constant(4 : index) : i64
    %26 = llvm.mul %11, %25  : i64
    %27 = llvm.add %24, %26  : i64
    %28 = llvm.add %27, %8  : i64
    %29 = llvm.getelementptr %22[%28] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %30 = llvm.load %29 : !llvm.ptr<f32>
    %31 = llvm.extractvalue %2[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %32 = llvm.mlir.constant(16 : index) : i64
    %33 = llvm.mul %3, %32  : i64
    %34 = llvm.mlir.constant(4 : index) : i64
    %35 = llvm.mul %5, %34  : i64
    %36 = llvm.add %33, %35  : i64
    %37 = llvm.add %36, %8  : i64
    %38 = llvm.getelementptr %31[%37] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %39 = llvm.load %38 : !llvm.ptr<f32>
    %40 = arith.mulf %21, %30 : f32
    %41 = arith.addf %39, %40 : f32
    %42 = llvm.extractvalue %2[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %43 = llvm.mlir.constant(16 : index) : i64
    %44 = llvm.mul %3, %43  : i64
    %45 = llvm.mlir.constant(4 : index) : i64
    %46 = llvm.mul %5, %45  : i64
    %47 = llvm.add %44, %46  : i64
    %48 = llvm.add %47, %8  : i64
    %49 = llvm.getelementptr %42[%48] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    llvm.store %41, %49 : !llvm.ptr<f32>
    %50 = arith.addi %10, %c1 : index
    cf.br ^bb3(%50 : index)
  ^bb5:  // pred: ^bb3
    %51 = arith.addi %7, %c1 : index
    cf.br ^bb2(%51 : index)
  ^bb6:  // pred: ^bb2
    %52 = arith.addi %4, %c1 : index
    cf.br ^bb1(%52 : index)
  ^bb7:  // pred: ^bb1
    return
  }
}


// -----// IR Dump After ConvertArithmeticToLLVM //----- //
func @main_kernel(%arg0: memref<1x4x8xf32>, %arg1: memref<1x8x4xf32>, %arg2: memref<1x4x4xf32>) {
  %0 = builtin.unrealized_conversion_cast %arg0 : memref<1x4x8xf32> to !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
  %1 = builtin.unrealized_conversion_cast %arg1 : memref<1x8x4xf32> to !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
  %2 = builtin.unrealized_conversion_cast %arg2 : memref<1x4x4xf32> to !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
  %3 = llvm.mlir.constant(0 : index) : i64
  %4 = builtin.unrealized_conversion_cast %3 : i64 to index
  %5 = builtin.unrealized_conversion_cast %4 : index to i64
  %6 = llvm.mlir.constant(4 : index) : i64
  %7 = llvm.mlir.constant(1 : index) : i64
  %8 = llvm.mlir.constant(8 : index) : i64
  cf.br ^bb1(%4 : index)
^bb1(%9: index):  // 2 preds: ^bb0, ^bb6
  %10 = builtin.unrealized_conversion_cast %9 : index to i64
  %11 = builtin.unrealized_conversion_cast %9 : index to i64
  %12 = llvm.icmp "slt" %10, %6 : i64
  cf.cond_br %12, ^bb2(%4 : index), ^bb7
^bb2(%13: index):  // 2 preds: ^bb1, ^bb5
  %14 = builtin.unrealized_conversion_cast %13 : index to i64
  %15 = builtin.unrealized_conversion_cast %13 : index to i64
  %16 = llvm.icmp "slt" %14, %6 : i64
  cf.cond_br %16, ^bb3(%4 : index), ^bb6
^bb3(%17: index):  // 2 preds: ^bb2, ^bb4
  %18 = builtin.unrealized_conversion_cast %17 : index to i64
  %19 = builtin.unrealized_conversion_cast %17 : index to i64
  %20 = llvm.icmp "slt" %18, %8 : i64
  cf.cond_br %20, ^bb4, ^bb5
^bb4:  // pred: ^bb3
  %21 = llvm.extractvalue %0[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
  %22 = llvm.mlir.constant(32 : index) : i64
  %23 = llvm.mul %5, %22  : i64
  %24 = llvm.mlir.constant(8 : index) : i64
  %25 = llvm.mul %11, %24  : i64
  %26 = llvm.add %23, %25  : i64
  %27 = llvm.add %26, %19  : i64
  %28 = llvm.getelementptr %21[%27] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
  %29 = llvm.load %28 : !llvm.ptr<f32>
  %30 = llvm.extractvalue %1[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
  %31 = llvm.mlir.constant(32 : index) : i64
  %32 = llvm.mul %5, %31  : i64
  %33 = llvm.mlir.constant(4 : index) : i64
  %34 = llvm.mul %19, %33  : i64
  %35 = llvm.add %32, %34  : i64
  %36 = llvm.add %35, %15  : i64
  %37 = llvm.getelementptr %30[%36] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
  %38 = llvm.load %37 : !llvm.ptr<f32>
  %39 = llvm.extractvalue %2[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
  %40 = llvm.mlir.constant(16 : index) : i64
  %41 = llvm.mul %5, %40  : i64
  %42 = llvm.mlir.constant(4 : index) : i64
  %43 = llvm.mul %11, %42  : i64
  %44 = llvm.add %41, %43  : i64
  %45 = llvm.add %44, %15  : i64
  %46 = llvm.getelementptr %39[%45] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
  %47 = llvm.load %46 : !llvm.ptr<f32>
  %48 = llvm.fmul %29, %38  : f32
  %49 = llvm.fadd %47, %48  : f32
  %50 = llvm.extractvalue %2[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
  %51 = llvm.mlir.constant(16 : index) : i64
  %52 = llvm.mul %5, %51  : i64
  %53 = llvm.mlir.constant(4 : index) : i64
  %54 = llvm.mul %11, %53  : i64
  %55 = llvm.add %52, %54  : i64
  %56 = llvm.add %55, %15  : i64
  %57 = llvm.getelementptr %50[%56] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
  llvm.store %49, %57 : !llvm.ptr<f32>
  %58 = llvm.add %18, %7  : i64
  %59 = builtin.unrealized_conversion_cast %58 : i64 to index
  cf.br ^bb3(%59 : index)
^bb5:  // pred: ^bb3
  %60 = llvm.add %14, %7  : i64
  %61 = builtin.unrealized_conversion_cast %60 : i64 to index
  cf.br ^bb2(%61 : index)
^bb6:  // pred: ^bb2
  %62 = llvm.add %10, %7  : i64
  %63 = builtin.unrealized_conversion_cast %62 : i64 to index
  cf.br ^bb1(%63 : index)
^bb7:  // pred: ^bb1
  return
}

// -----// IR Dump After ExpandOps //----- //
func @main_kernel(%arg0: memref<1x4x8xf32>, %arg1: memref<1x8x4xf32>, %arg2: memref<1x4x4xf32>) {
  %0 = builtin.unrealized_conversion_cast %arg0 : memref<1x4x8xf32> to !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
  %1 = builtin.unrealized_conversion_cast %arg1 : memref<1x8x4xf32> to !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
  %2 = builtin.unrealized_conversion_cast %arg2 : memref<1x4x4xf32> to !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
  %3 = llvm.mlir.constant(0 : index) : i64
  %4 = builtin.unrealized_conversion_cast %3 : i64 to index
  %5 = llvm.mlir.constant(4 : index) : i64
  %6 = llvm.mlir.constant(1 : index) : i64
  %7 = llvm.mlir.constant(8 : index) : i64
  cf.br ^bb1(%4 : index)
^bb1(%8: index):  // 2 preds: ^bb0, ^bb6
  %9 = builtin.unrealized_conversion_cast %8 : index to i64
  %10 = builtin.unrealized_conversion_cast %8 : index to i64
  %11 = llvm.icmp "slt" %9, %5 : i64
  cf.cond_br %11, ^bb2(%4 : index), ^bb7
^bb2(%12: index):  // 2 preds: ^bb1, ^bb5
  %13 = builtin.unrealized_conversion_cast %12 : index to i64
  %14 = builtin.unrealized_conversion_cast %12 : index to i64
  %15 = llvm.icmp "slt" %13, %5 : i64
  cf.cond_br %15, ^bb3(%4 : index), ^bb6
^bb3(%16: index):  // 2 preds: ^bb2, ^bb4
  %17 = builtin.unrealized_conversion_cast %16 : index to i64
  %18 = builtin.unrealized_conversion_cast %16 : index to i64
  %19 = llvm.icmp "slt" %17, %7 : i64
  cf.cond_br %19, ^bb4, ^bb5
^bb4:  // pred: ^bb3
  %20 = llvm.extractvalue %0[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
  %21 = llvm.mlir.constant(32 : index) : i64
  %22 = llvm.mul %3, %21  : i64
  %23 = llvm.mlir.constant(8 : index) : i64
  %24 = llvm.mul %10, %23  : i64
  %25 = llvm.add %22, %24  : i64
  %26 = llvm.add %25, %18  : i64
  %27 = llvm.getelementptr %20[%26] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
  %28 = llvm.load %27 : !llvm.ptr<f32>
  %29 = llvm.extractvalue %1[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
  %30 = llvm.mlir.constant(32 : index) : i64
  %31 = llvm.mul %3, %30  : i64
  %32 = llvm.mlir.constant(4 : index) : i64
  %33 = llvm.mul %18, %32  : i64
  %34 = llvm.add %31, %33  : i64
  %35 = llvm.add %34, %14  : i64
  %36 = llvm.getelementptr %29[%35] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
  %37 = llvm.load %36 : !llvm.ptr<f32>
  %38 = llvm.extractvalue %2[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
  %39 = llvm.mlir.constant(16 : index) : i64
  %40 = llvm.mul %3, %39  : i64
  %41 = llvm.mlir.constant(4 : index) : i64
  %42 = llvm.mul %10, %41  : i64
  %43 = llvm.add %40, %42  : i64
  %44 = llvm.add %43, %14  : i64
  %45 = llvm.getelementptr %38[%44] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
  %46 = llvm.load %45 : !llvm.ptr<f32>
  %47 = llvm.fmul %28, %37  : f32
  %48 = llvm.fadd %46, %47  : f32
  %49 = llvm.extractvalue %2[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
  %50 = llvm.mlir.constant(16 : index) : i64
  %51 = llvm.mul %3, %50  : i64
  %52 = llvm.mlir.constant(4 : index) : i64
  %53 = llvm.mul %10, %52  : i64
  %54 = llvm.add %51, %53  : i64
  %55 = llvm.add %54, %14  : i64
  %56 = llvm.getelementptr %49[%55] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
  llvm.store %48, %56 : !llvm.ptr<f32>
  %57 = llvm.add %17, %6  : i64
  %58 = builtin.unrealized_conversion_cast %57 : i64 to index
  cf.br ^bb3(%58 : index)
^bb5:  // pred: ^bb3
  %59 = llvm.add %13, %6  : i64
  %60 = builtin.unrealized_conversion_cast %59 : i64 to index
  cf.br ^bb2(%60 : index)
^bb6:  // pred: ^bb2
  %61 = llvm.add %9, %6  : i64
  %62 = builtin.unrealized_conversion_cast %61 : i64 to index
  cf.br ^bb1(%62 : index)
^bb7:  // pred: ^bb1
  return
}

// -----// IR Dump After ConvertStandardToLLVM //----- //
module attributes {llvm.data_layout = "", soda.bambu.container_module, soda.container_module, tf.versions = {bad_consumers = [], min_consumer = 0 : i32, producer = 561 : i32}} {
  llvm.func @main_kernel(%arg0: !llvm.ptr<f32>, %arg1: !llvm.ptr<f32>, %arg2: !llvm.ptr<f32>) {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %1 = llvm.insertvalue %arg0, %0[0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %2 = llvm.insertvalue %arg0, %1[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %3 = llvm.mlir.constant(0 : index) : i64
    %4 = llvm.insertvalue %3, %2[2] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %5 = llvm.mlir.constant(1 : index) : i64
    %6 = llvm.insertvalue %5, %4[3, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %7 = llvm.mlir.constant(32 : index) : i64
    %8 = llvm.insertvalue %7, %6[4, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %9 = llvm.mlir.constant(4 : index) : i64
    %10 = llvm.insertvalue %9, %8[3, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %11 = llvm.mlir.constant(8 : index) : i64
    %12 = llvm.insertvalue %11, %10[4, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %13 = llvm.mlir.constant(8 : index) : i64
    %14 = llvm.insertvalue %13, %12[3, 2] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %15 = llvm.mlir.constant(1 : index) : i64
    %16 = llvm.insertvalue %15, %14[4, 2] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %17 = builtin.unrealized_conversion_cast %16 : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)> to memref<1x4x8xf32>
    %18 = llvm.mlir.undef : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %19 = llvm.insertvalue %arg1, %18[0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %20 = llvm.insertvalue %arg1, %19[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %21 = llvm.mlir.constant(0 : index) : i64
    %22 = llvm.insertvalue %21, %20[2] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %23 = llvm.mlir.constant(1 : index) : i64
    %24 = llvm.insertvalue %23, %22[3, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %25 = llvm.mlir.constant(32 : index) : i64
    %26 = llvm.insertvalue %25, %24[4, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %27 = llvm.mlir.constant(8 : index) : i64
    %28 = llvm.insertvalue %27, %26[3, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %29 = llvm.mlir.constant(4 : index) : i64
    %30 = llvm.insertvalue %29, %28[4, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %31 = llvm.mlir.constant(4 : index) : i64
    %32 = llvm.insertvalue %31, %30[3, 2] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %33 = llvm.mlir.constant(1 : index) : i64
    %34 = llvm.insertvalue %33, %32[4, 2] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %35 = builtin.unrealized_conversion_cast %34 : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)> to memref<1x8x4xf32>
    %36 = llvm.mlir.undef : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %37 = llvm.insertvalue %arg2, %36[0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %38 = llvm.insertvalue %arg2, %37[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %39 = llvm.mlir.constant(0 : index) : i64
    %40 = llvm.insertvalue %39, %38[2] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %41 = llvm.mlir.constant(1 : index) : i64
    %42 = llvm.insertvalue %41, %40[3, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %43 = llvm.mlir.constant(16 : index) : i64
    %44 = llvm.insertvalue %43, %42[4, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %45 = llvm.mlir.constant(4 : index) : i64
    %46 = llvm.insertvalue %45, %44[3, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %47 = llvm.mlir.constant(4 : index) : i64
    %48 = llvm.insertvalue %47, %46[4, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %49 = llvm.mlir.constant(4 : index) : i64
    %50 = llvm.insertvalue %49, %48[3, 2] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %51 = llvm.mlir.constant(1 : index) : i64
    %52 = llvm.insertvalue %51, %50[4, 2] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %53 = builtin.unrealized_conversion_cast %52 : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)> to memref<1x4x4xf32>
    %54 = builtin.unrealized_conversion_cast %17 : memref<1x4x8xf32> to !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %55 = builtin.unrealized_conversion_cast %35 : memref<1x8x4xf32> to !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %56 = builtin.unrealized_conversion_cast %53 : memref<1x4x4xf32> to !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %57 = llvm.mlir.constant(0 : index) : i64
    %58 = builtin.unrealized_conversion_cast %57 : i64 to index
    %59 = llvm.mlir.constant(4 : index) : i64
    %60 = llvm.mlir.constant(1 : index) : i64
    %61 = llvm.mlir.constant(8 : index) : i64
    llvm.br ^bb1(%57 : i64)
  ^bb1(%62: i64):  // 2 preds: ^bb0, ^bb6
    %63 = builtin.unrealized_conversion_cast %62 : i64 to index
    %64 = builtin.unrealized_conversion_cast %63 : index to i64
    %65 = builtin.unrealized_conversion_cast %63 : index to i64
    %66 = llvm.icmp "slt" %64, %59 : i64
    llvm.cond_br %66, ^bb2(%57 : i64), ^bb7
  ^bb2(%67: i64):  // 2 preds: ^bb1, ^bb5
    %68 = builtin.unrealized_conversion_cast %67 : i64 to index
    %69 = builtin.unrealized_conversion_cast %68 : index to i64
    %70 = builtin.unrealized_conversion_cast %68 : index to i64
    %71 = llvm.icmp "slt" %69, %59 : i64
    llvm.cond_br %71, ^bb3(%57 : i64), ^bb6
  ^bb3(%72: i64):  // 2 preds: ^bb2, ^bb4
    %73 = builtin.unrealized_conversion_cast %72 : i64 to index
    %74 = builtin.unrealized_conversion_cast %73 : index to i64
    %75 = builtin.unrealized_conversion_cast %73 : index to i64
    %76 = llvm.icmp "slt" %74, %61 : i64
    llvm.cond_br %76, ^bb4, ^bb5
  ^bb4:  // pred: ^bb3
    %77 = llvm.extractvalue %54[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %78 = llvm.mlir.constant(32 : index) : i64
    %79 = llvm.mul %57, %78  : i64
    %80 = llvm.mlir.constant(8 : index) : i64
    %81 = llvm.mul %65, %80  : i64
    %82 = llvm.add %79, %81  : i64
    %83 = llvm.add %82, %75  : i64
    %84 = llvm.getelementptr %77[%83] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %85 = llvm.load %84 : !llvm.ptr<f32>
    %86 = llvm.extractvalue %55[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %87 = llvm.mlir.constant(32 : index) : i64
    %88 = llvm.mul %57, %87  : i64
    %89 = llvm.mlir.constant(4 : index) : i64
    %90 = llvm.mul %75, %89  : i64
    %91 = llvm.add %88, %90  : i64
    %92 = llvm.add %91, %70  : i64
    %93 = llvm.getelementptr %86[%92] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %94 = llvm.load %93 : !llvm.ptr<f32>
    %95 = llvm.extractvalue %56[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %96 = llvm.mlir.constant(16 : index) : i64
    %97 = llvm.mul %57, %96  : i64
    %98 = llvm.mlir.constant(4 : index) : i64
    %99 = llvm.mul %65, %98  : i64
    %100 = llvm.add %97, %99  : i64
    %101 = llvm.add %100, %70  : i64
    %102 = llvm.getelementptr %95[%101] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %103 = llvm.load %102 : !llvm.ptr<f32>
    %104 = llvm.fmul %85, %94  : f32
    %105 = llvm.fadd %103, %104  : f32
    %106 = llvm.extractvalue %56[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %107 = llvm.mlir.constant(16 : index) : i64
    %108 = llvm.mul %57, %107  : i64
    %109 = llvm.mlir.constant(4 : index) : i64
    %110 = llvm.mul %65, %109  : i64
    %111 = llvm.add %108, %110  : i64
    %112 = llvm.add %111, %70  : i64
    %113 = llvm.getelementptr %106[%112] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    llvm.store %105, %113 : !llvm.ptr<f32>
    %114 = llvm.add %74, %60  : i64
    %115 = builtin.unrealized_conversion_cast %114 : i64 to index
    llvm.br ^bb3(%114 : i64)
  ^bb5:  // pred: ^bb3
    %116 = llvm.add %69, %60  : i64
    %117 = builtin.unrealized_conversion_cast %116 : i64 to index
    llvm.br ^bb2(%116 : i64)
  ^bb6:  // pred: ^bb2
    %118 = llvm.add %64, %60  : i64
    %119 = builtin.unrealized_conversion_cast %118 : i64 to index
    llvm.br ^bb1(%118 : i64)
  ^bb7:  // pred: ^bb1
    llvm.return
  }
}


// -----// IR Dump After ReconcileUnrealizedCasts //----- //
module attributes {llvm.data_layout = "", soda.bambu.container_module, soda.container_module, tf.versions = {bad_consumers = [], min_consumer = 0 : i32, producer = 561 : i32}} {
  llvm.func @main_kernel(%arg0: !llvm.ptr<f32>, %arg1: !llvm.ptr<f32>, %arg2: !llvm.ptr<f32>) {
    %0 = llvm.mlir.undef : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %1 = llvm.insertvalue %arg0, %0[0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %2 = llvm.insertvalue %arg0, %1[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %3 = llvm.mlir.constant(0 : index) : i64
    %4 = llvm.insertvalue %3, %2[2] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %5 = llvm.mlir.constant(1 : index) : i64
    %6 = llvm.insertvalue %5, %4[3, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %7 = llvm.mlir.constant(32 : index) : i64
    %8 = llvm.insertvalue %7, %6[4, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %9 = llvm.mlir.constant(4 : index) : i64
    %10 = llvm.insertvalue %9, %8[3, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %11 = llvm.mlir.constant(8 : index) : i64
    %12 = llvm.insertvalue %11, %10[4, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %13 = llvm.mlir.constant(8 : index) : i64
    %14 = llvm.insertvalue %13, %12[3, 2] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %15 = llvm.mlir.constant(1 : index) : i64
    %16 = llvm.insertvalue %15, %14[4, 2] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %17 = llvm.mlir.undef : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %18 = llvm.insertvalue %arg1, %17[0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %19 = llvm.insertvalue %arg1, %18[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %20 = llvm.mlir.constant(0 : index) : i64
    %21 = llvm.insertvalue %20, %19[2] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %22 = llvm.mlir.constant(1 : index) : i64
    %23 = llvm.insertvalue %22, %21[3, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %24 = llvm.mlir.constant(32 : index) : i64
    %25 = llvm.insertvalue %24, %23[4, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %26 = llvm.mlir.constant(8 : index) : i64
    %27 = llvm.insertvalue %26, %25[3, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %28 = llvm.mlir.constant(4 : index) : i64
    %29 = llvm.insertvalue %28, %27[4, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %30 = llvm.mlir.constant(4 : index) : i64
    %31 = llvm.insertvalue %30, %29[3, 2] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %32 = llvm.mlir.constant(1 : index) : i64
    %33 = llvm.insertvalue %32, %31[4, 2] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %34 = llvm.mlir.undef : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %35 = llvm.insertvalue %arg2, %34[0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %36 = llvm.insertvalue %arg2, %35[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %37 = llvm.mlir.constant(0 : index) : i64
    %38 = llvm.insertvalue %37, %36[2] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %39 = llvm.mlir.constant(1 : index) : i64
    %40 = llvm.insertvalue %39, %38[3, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %41 = llvm.mlir.constant(16 : index) : i64
    %42 = llvm.insertvalue %41, %40[4, 0] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %43 = llvm.mlir.constant(4 : index) : i64
    %44 = llvm.insertvalue %43, %42[3, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %45 = llvm.mlir.constant(4 : index) : i64
    %46 = llvm.insertvalue %45, %44[4, 1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %47 = llvm.mlir.constant(4 : index) : i64
    %48 = llvm.insertvalue %47, %46[3, 2] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %49 = llvm.mlir.constant(1 : index) : i64
    %50 = llvm.insertvalue %49, %48[4, 2] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %51 = llvm.mlir.constant(0 : index) : i64
    %52 = llvm.mlir.constant(4 : index) : i64
    %53 = llvm.mlir.constant(1 : index) : i64
    %54 = llvm.mlir.constant(8 : index) : i64
    llvm.br ^bb1(%51 : i64)
  ^bb1(%55: i64):  // 2 preds: ^bb0, ^bb6
    %56 = llvm.icmp "slt" %55, %52 : i64
    llvm.cond_br %56, ^bb2(%51 : i64), ^bb7
  ^bb2(%57: i64):  // 2 preds: ^bb1, ^bb5
    %58 = llvm.icmp "slt" %57, %52 : i64
    llvm.cond_br %58, ^bb3(%51 : i64), ^bb6
  ^bb3(%59: i64):  // 2 preds: ^bb2, ^bb4
    %60 = llvm.icmp "slt" %59, %54 : i64
    llvm.cond_br %60, ^bb4, ^bb5
  ^bb4:  // pred: ^bb3
    %61 = llvm.extractvalue %16[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %62 = llvm.mlir.constant(32 : index) : i64
    %63 = llvm.mul %51, %62  : i64
    %64 = llvm.mlir.constant(8 : index) : i64
    %65 = llvm.mul %55, %64  : i64
    %66 = llvm.add %63, %65  : i64
    %67 = llvm.add %66, %59  : i64
    %68 = llvm.getelementptr %61[%67] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %69 = llvm.load %68 : !llvm.ptr<f32>
    %70 = llvm.extractvalue %33[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %71 = llvm.mlir.constant(32 : index) : i64
    %72 = llvm.mul %51, %71  : i64
    %73 = llvm.mlir.constant(4 : index) : i64
    %74 = llvm.mul %59, %73  : i64
    %75 = llvm.add %72, %74  : i64
    %76 = llvm.add %75, %57  : i64
    %77 = llvm.getelementptr %70[%76] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %78 = llvm.load %77 : !llvm.ptr<f32>
    %79 = llvm.extractvalue %50[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %80 = llvm.mlir.constant(16 : index) : i64
    %81 = llvm.mul %51, %80  : i64
    %82 = llvm.mlir.constant(4 : index) : i64
    %83 = llvm.mul %55, %82  : i64
    %84 = llvm.add %81, %83  : i64
    %85 = llvm.add %84, %57  : i64
    %86 = llvm.getelementptr %79[%85] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    %87 = llvm.load %86 : !llvm.ptr<f32>
    %88 = llvm.fmul %69, %78  : f32
    %89 = llvm.fadd %87, %88  : f32
    %90 = llvm.extractvalue %50[1] : !llvm.struct<(ptr<f32>, ptr<f32>, i64, array<3 x i64>, array<3 x i64>)>
    %91 = llvm.mlir.constant(16 : index) : i64
    %92 = llvm.mul %51, %91  : i64
    %93 = llvm.mlir.constant(4 : index) : i64
    %94 = llvm.mul %55, %93  : i64
    %95 = llvm.add %92, %94  : i64
    %96 = llvm.add %95, %57  : i64
    %97 = llvm.getelementptr %90[%96] : (!llvm.ptr<f32>, i64) -> !llvm.ptr<f32>
    llvm.store %89, %97 : !llvm.ptr<f32>
    %98 = llvm.add %59, %53  : i64
    llvm.br ^bb3(%98 : i64)
  ^bb5:  // pred: ^bb3
    %99 = llvm.add %57, %53  : i64
    llvm.br ^bb2(%99 : i64)
  ^bb6:  // pred: ^bb2
    %100 = llvm.add %55, %53  : i64
    llvm.br ^bb1(%100 : i64)
  ^bb7:  // pred: ^bb1
    llvm.return
  }
}


