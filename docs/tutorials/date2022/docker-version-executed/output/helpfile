OVERVIEW: SODA optimizer driver

Available Dialects: affine, arith, builtin, cf, linalg, llvm, math, memref, scf, snn, soda, std, vector
USAGE: soda-opt [options] <input file>

OPTIONS:

Color Options:

  --color                                              - Use colors in output (default=autodetect)

General options:

  Compiler passes to run
    --pass-pipeline                                    -   A textual description of a pass pipeline to run
    Passes:
      --affine-data-copy-generate                      -   Generate explicit copying for affine memory operations
        --fast-mem-capacity=<ulong>                    - Set fast memory space capacity in KiB (default: unlimited)
        --fast-mem-space=<uint>                        - Fast memory space identifier for copy generation (default: 1)
        --generate-dma                                 - Generate DMA instead of point-wise copy
        --min-dma-transfer=<int>                       - Minimum DMA transfer size supported by the target in bytes
        --skip-non-unit-stride-loops                   - Testing purposes: avoid non-unit stride loop choice depths for copy placement
        --slow-mem-space=<uint>                        - Slow memory space identifier for copy generation (default: 0)
        --tag-mem-space=<uint>                         - Tag memory space identifier for copy generation (default: 0)
      --affine-loop-fusion                             -   Fuse affine loop nests
        --fusion-compute-tolerance=<number>            - Fractional increase in additional computation tolerated while fusing
        --fusion-fast-mem-space=<uint>                 - Faster memory space number to promote fusion buffers to
        --fusion-local-buf-threshold=<ulong>           - Threshold size (KiB) for promoting local buffers to fast memory space
        --fusion-maximal                               - Enables maximal loop fusion
        --mode=<value>                                 - fusion mode to attempt
    =greedy                                      -   Perform greedy (both producer-consumer and sibling)  fusion
    =producer                                    -   Perform only producer-consumer fusion
    =sibling                                     -   Perform only sibling fusion
      --affine-loop-invariant-code-motion              -   Hoist loop invariant instructions outside of affine loops
      --affine-loop-tile                               -   Tile affine loop nests
        --cache-size=<ulong>                           - Set size of cache to tile for in KiB
        --separate                                     - Separate full and partial tiles
        --tile-size=<uint>                             - Use this tile size for all loops
        --tile-sizes=<uint>                            - List of tile sizes for each perfect nest (overridden by -tile-size)
      --affine-loop-unroll                             -   Unroll affine loops
        --unroll-factor=<uint>                         - Use this unroll factor for all loops being unrolled
        --unroll-full                                  - Fully unroll loops
        --unroll-full-threshold=<uint>                 - Unroll all loops with trip count less than or equal to this
        --unroll-num-reps=<uint>                       - Unroll innermost loops repeatedly this many times
        --unroll-up-to-factor                          - Allow unrolling up to the factor specified
      --affine-scalrep                                 -   Replace affine memref acceses by scalars by forwarding stores to loads and eliminating redundant loads
      --arith-expand                                   -   Legalize Arithmetic ops to be convertible to LLVM.
      --canonicalize                                   -   Canonicalize operations
        --disable-patterns=<string>                    - Labels of patterns that should be filtered out during application
        --enable-patterns=<string>                     - Labels of patterns that should be used during application, all other patterns are filtered out
        --max-iterations=<long>                        - Seed the worklist in general top-down order
        --region-simplify                              - Seed the worklist in general top-down order
        --top-down                                     - Seed the worklist in general top-down order
      --convert-affine-for-to-soda                     -   Convert top-level AffineFor Ops to SODA kernels
      --convert-arith-to-llvm                          -   Convert Arithmetic dialect to LLVM dialect
        --index-bitwidth=<uint>                        - Bitwidth of the index type, 0 to use size of machine word
      --convert-linalg-conv-to-soda                    -   Convert top-level linalg::conv Ops to SODA kernels
      --convert-linalg-dot-to-soda                     -   Convert top-level linalg::dot Ops to SODA kernels
      --convert-linalg-generic-to-soda                 -   Convert top-level linalg::generic Ops to SODA kernels
      --convert-linalg-matmul-to-soda                  -   Convert top-level linalg::matmul Ops to SODA kernels
      --convert-linalg-to-affine-loops                 -   Lower the operations from the linalg dialect into affine loops
      --convert-linalg-to-std                          -   Convert the operations from the linalg dialect into the Standard dialect
      --convert-math-to-libm                           -   Convert Math dialect to libm calls
      --convert-math-to-llvm                           -   Convert Math dialect to LLVM dialect
      --convert-memref-to-llvm                         -   Convert operations from the MemRef dialect to the LLVM dialect
        --index-bitwidth=<uint>                        - Bitwidth of the index type, 0 to use size of machine word
        --use-aligned-alloc                            - Use aligned_alloc in place of malloc for heap allocations
      --convert-scf-for-to-soda                        -   Convert top-level scf::for Ops to SODA kernels
      --convert-scf-to-cf                              -   Convert SCF dialect to ControlFlow dialect, replacing structured control flow with a CFG
      --convert-func-to-llvm                            -   Convert scalar and vector operations from the Standard to the LLVM dialect
        --data-layout=<string>                         - String description (LLVM format) of the data layout that is expected on the produced module
        --emit-c-wrappers                              - Emit wrappers for C-compatible pointer-to-struct memref descriptors
        --index-bitwidth=<uint>                        - Bitwidth of the index type, 0 to use size of machine word
        --use-bare-ptr-memref-call-conv                - Replace FuncOp's MemRef arguments with bare pointers to the MemRef element types
      --cse                                            -   Eliminate common sub-expressions
      --erase-buffer-deallocation                      -   Erase all buffer deallocation ops in the IR
      --forward-linalg-fill                            -   Move non-nested linalg.fill ops the top of the function
      --forward-memref-allocations                     -   Move non-nested memref allocations to the top of the function
      --forward-memref-copy                            -   Move non-nested linalg.copy ops the top of the function
      --inline                                         -   Inline function calls
        --default-pipeline=<string>                    - The default optimizer pipeline used for callables
        --max-iterations=<uint>                        - Maximum number of iterations when inlining within an SCC
        --op-pipelines=<string>                        - Callable operation specific optimizer pipelines (in the form of `dialect.op(pipeline)`)
      --linalg-promote-subviews                        -   Promote subview ops to local buffers
        --test-promote-dynamic                         - Test generation of dynamic promoted buffers
        --test-use-alloca                              - Test generation of alloca'ed buffers.
      --lower-affine                                   -   Lower Affine operations to a combination of Standard and SCF operations
      --memref-expand                                  -   Legalize memref operations to be convertible to LLVM.
      --promote-buffers-to-stack                       -   Promotes heap-based allocations to automatically managed stack-based allocations
        --max-alloc-size-in-bytes=<uint>               - Maximal size in bytes to promote allocations to stack.
        --max-rank-of-allocated-memref=<uint>          - Maximal memref rank to promote dynamic buffers.
      --reconcile-unrealized-casts                     -   Simplify and eliminate unrealized conversion casts
      --snn-print-ops                                  -   Print Ops from the SNN dialect
      --soda-async-region                              -   Make SODA ops async.
      --soda-extract-arguments-to-xml                  -   Generate XML files for soda.launch_func and its arguments
        --using-bare-ptr                               - If set, generate test vectors assuming bare ptrs (default: false)
        --write-to-terminal                            - If set, write to terminal instead of a file (default: false)
      --soda-generate-bambu-accelcode                  -   Extract bambu kernels into simple mlir modules
        --no-aa                                        - If set, kernel arguments will not be marked with no-alias (default: false)
      --soda-generate-bambu-hostcode                   -   Generate host code to call bambu accelerator api
      --soda-outline-bambu-code                        -   Outline soda.launch bodies into bambu kernel functions
      --soda-test-print-nesting                        -   Print op nesting information
        --option-name=<ulong>                          - Description of the option
      --test-linalg-codegen-strategy                   -   Test Linalg Codegen Strategy.
        --anchor-func=<string>                         - Which single func op is the anchor for the codegen strategy to latch on.
        --anchor-op=<string>                           - Which single linalg op is the anchor for the codegen strategy to latch on:
                                                   	linalg.matmul: anchor on linalg.matmul
                                                   	linalg.matmul_column_major: anchor on linalg.matmul_column_major
                                                   	memref.copy: anchor on memref.copy
                                                   	linalg.fill: anchor on linalg.fill
        --decompose                                    - Decompose convolutions to lower dimensional ones.
        --fuse                                         - Fuse the producers after tiling the root op.
        --generalize                                   - Generalize named operations.
        --hoist-paddings=<long>                        - Operand hoisting depths when test-pad-pattern.
        --iterator-interchange=<long>                  - Specifies the iterator interchange.
        --pack-paddings=<long>                         - Operand packing flags when test-pad-pattern.
        --pad                                          - Pad the operands.
        --pad-inputs-only                              - Only pad input operands when test-pad-pattern
        --promote                                      - Promote the tile into a small aligned memory buffer.
        --promote-full-tile-pad                        - Pad the small aligned memory buffer to the tile sizes.
        --register-promote                             - Promote the register tile into a small aligned memory buffer.
        --register-promote-full-tile-pad               - Pad the small aligned memory buffer to the tile sizes.
        --register-tile-sizes=<long>                   - Specifies the size of the register tile that will be used  to vectorize
        --run-enable-pass                              - Run the enable pass between transformations
        --split-transfers=<string>                     - Split vector transfers between slow (masked) and fast (unmasked) variants. Possible options are:
                                                   	none: keep unsplit vector.transfer and pay the full price
                                                   	memref.copy: use linalg.fill + memref.copy for the slow path
                                                   	vector-transfers: use extra small unmasked vector.transfer for the slow path
        --tile-interchange=<long>                      - Specifies the tile interchange.
        --tile-sizes=<long>                            - Specifies the tile sizes.
        --transpose-paddings=<string>                  - Transpose paddings when test-pad-pattern. Specify a operand dimension interchange using the following format:
                                                   -transpose-paddings=1:0:2,0:1,0:1
                                                   It defines the interchange [1, 0, 2] for operand one and the interchange [0, 1] (no transpose) for the remaining operands.All interchange vectors have to be permuations matching the operand rank.
        --unroll-vector-transfers                      - Enable full unrolling of vector.transfer operations
        --vectorize                                    - Rewrite the linalg op as a vector operation.
        --vectorize-contraction-to=<string>            - the type of vector op to use for linalg contractions
        --vectorize-padding                            - Rewrite pad tensor ops as vector operations.
      --test-loop-permutation                          -   Tests affine loop permutation utility
        --permutation-map=<uint>                       - Specify the loop permutation
    Pass Pipelines:
      --lower-all-to-llvm                              -   Run a pipeline of lowering steps until the llvm dialect without optimizations
        --emit-c-wrappers                              - Emit wrappers for C-compatible pointer-to-struct memref descriptors. Cannot be used with -use-bare-ptr-memref-call-conv. (default false)
        --use-bare-ptr-memref-call-conv                - Replace FuncOp's MemRef arguments with bare pointers to the MemRef element types. Cannot be used with -emit-c-wrappers. (default false)
      --soda-opt-pipeline                              -   Run a generic pass pipeline to optimize previously outlined key operations
        --cache-size=<ulong>                           - Set size of cache to tile for in KiB
        --emit-c-wrappers                              - Emit wrappers for C-compatible pointer-to-struct memref descriptors. Cannot be used with -use-bare-ptr-memref-call-conv. (default false)
        --use-bare-ptr-memref-call-conv                - Replace FuncOp's MemRef arguments with bare pointers to the MemRef element types. Cannot be used with -emit-c-wrappers. (default false)
      --soda-opt-pipeline-for-bambu                    -   Run the full pass pipeline to optimize previously outlined key operations for bambu target
        --affine-tile-size=<ulong>                     - Set the unified tiled size, used for all affine.for ops. (default 0 - don't tile)
        --bitwidth-of-index-type=<uint>                - Alloca Promotion - Bitwidth of the index type. Used for size estimation. No effect if -no-alloca-promotion is used. (default 64)
        --emit-c-wrappers                              - Emit wrappers for C-compatible pointer-to-struct memref descriptors. Cannot be used with -use-bare-ptr-memref-call-conv. (default false)
        --max-alloc-size-in-bytes=<uint>               - Alloca Promotion - Maximal size in bytes to promote allocations to stack. No effect if -no-alloca-promotion is used. (default 4096)
        --max-rank-of-allocated-memref=<uint>          - Alloca Promotion - Max memref rank to promote dynamic buffers. No effect if -no-alloca-promotion is used. (default 3)
        --no-alloca-promotion                          - Remove optimization - alloca promotion
        --no-buffer-trick                              - Remove optimization - the buffer trick 
        --no-scalar-replacement                        - Remove optimization - scalar replacement of redundant affine memory operations
        --number-of-full-unrolls=<uint>                - The number of times to apply affine-loop-unrol=unroll-full. (default 3)
        --permutation-map=<uint>                       - Specify the loop permutation. List size must match number of affine.for loops.
        --use-bare-ptr-memref-call-conv                - Replace FuncOp's MemRef arguments with bare pointers to the MemRef element types. Cannot be used with -emit-c-wrappers. (default false)
  --allow-unregistered-dialect                         - Allow operation with no registered dialects
  --disable-i2p-p2i-opt                                - Disables inttoptr/ptrtoint roundtrip optimization
  --mlir-debug-counter=<string>                        - Comma separated list of debug counter skip and count arguments
  --mlir-disable-threading                             - Disable multi-threading within MLIR, overrides any further call to MLIRContext::enableMultiThreading()
  --mlir-elide-elementsattrs-if-larger=<uint>          - Elide ElementsAttrs with "..." that have more elements than the given upper limit
  --mlir-pretty-debuginfo                              - Print pretty debug info in MLIR output
  --mlir-print-debug-counter                           - Print out debug counter information after all counters have been accumulated
  --mlir-print-debuginfo                               - Print debug info in MLIR output
  --mlir-print-elementsattrs-with-hex-if-larger=<long> - Print DenseElementsAttrs with a hex string that have more elements than the given upper limit (use -1 to disable)
  --mlir-print-local-scope                             - Print with local scope and inline information (eliding aliases for attributes, types, and locations
  --mlir-print-op-on-diagnostic                        - When a diagnostic is emitted on an operation, also print the operation as an attached note
  --mlir-print-stacktrace-on-diagnostic                - When a diagnostic is emitted, also print the stack trace as an attached note
  --mlir-timing                                        - Display execution times
  --mlir-timing-display=<value>                        - Display method for timing data
    =list                                              -   display the results in a list sorted by total time
    =tree                                              -   display the results ina with a nested tree view
  -o=<filename>                                        - Output filename
  --opaque-pointers                                    - Use opaque pointers
  --pass-pipeline-crash-reproducer=<string>            - Generate a .mlir reproducer file at the given output path if the pass manager crashes or fails
  --pass-pipeline-local-reproducer                     - When generating a crash reproducer, attempt to generated a reproducer with the smallest pipeline.
  --pass-statistics                                    - Display the statistics of each pass
  --pass-statistics-display=<value>                    - Display method for pass statistics
    =list                                              -   display the results in a merged list sorted by pass name
    =pipeline                                          -   display the results with a nested pipeline view
  --print-ir-after=<pass-arg>                          - Print IR after specified passes
  --mlir-print-ir-after-all                                 - Print IR after each pass
  --print-ir-after-change                              - When printing the IR after a pass, only print if the IR changed
  --print-ir-after-failure                             - When printing the IR after a pass, only print if the pass failed
  --print-ir-before=<pass-arg>                         - Print IR before specified passes
  --print-ir-before-all                                - Print IR before each pass
  --print-ir-module-scope                              - When printing IR for print-ir-[before|after]{-all} always print the top-level operation
  --run-reproducer                                     - Append the command line options of the reproducer
  --show-dialects                                      - Print the list of registered dialects
  --split-input-file                                   - Split the input file into pieces and process each chunk independently
  --verify-diagnostics                                 - Check that emitted diagnostics match expected-* lines on the corresponding line
  --verify-each                                        - Run the verifier after each transformation pass

Generic Options:

  --help                                               - Display available options (--help-hidden for more)
  --help-list                                          - Display list of available options (--help-list-hidden for more)
  --version                                            - Display the version of this program
